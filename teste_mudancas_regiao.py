#!/usr/bin/env python3
"""
Teste para validar as mudan√ßas de remo√ß√£o do Sudeste e otimiza√ß√£o do regiao_utils
"""
import sys
import pandas as pd

def test_regiao_changes():
    """Testa as mudan√ßas relacionadas √† remo√ß√£o do Sudeste"""
    print("üß™ TESTANDO MUDAN√áAS NA ESTRUTURA DE REGI√ïES")
    print("=" * 50)
    
    try:
        # 1. Testar importa√ß√£o dos m√≥dulos
        print("1Ô∏è‚É£ Testando imports...")
        from utils.helpers.regiao_utils import REGIOES_BRASIL, agrupar_por_regiao
        from utils.mappings import get_mappings
        print("‚úÖ Imports bem-sucedidos")
        
        # 2. Verificar se Sudeste foi removido
        print("\n2Ô∏è‚É£ Verificando remo√ß√£o do Sudeste...")
        if 'Sudeste' not in REGIOES_BRASIL:
            print("‚úÖ Sudeste removido de REGIOES_BRASIL")
        else:
            print("‚ùå Sudeste ainda presente em REGIOES_BRASIL")
            return False
            
        # 3. Verificar mapeamentos
        mappings = get_mappings()
        regioes_mapping = mappings['regioes_mapping']
        
        if 'Sudeste' not in regioes_mapping:
            print("‚úÖ Sudeste removido de regioes_mapping")
        else:
            print("‚ùå Sudeste ainda presente em regioes_mapping")
            return False
        
        # 4. Verificar estados do Sudeste n√£o est√£o nos mapeamentos
        estados_sudeste = ['ES', 'MG', 'RJ', 'SP']
        estados_presentes = []
        for regiao, estados in regioes_mapping.items():
            estados_presentes.extend(estados)
            
        sudeste_encontrado = any(estado in estados_presentes for estado in estados_sudeste)
        if not sudeste_encontrado:
            print("‚úÖ Estados do Sudeste removidos dos mapeamentos")
        else:
            print("‚ùå Alguns estados do Sudeste ainda presentes")
            return False
        
        # 5. Testar nova fun√ß√£o agrupar_por_regiao
        print("\n5Ô∏è‚É£ Testando nova fun√ß√£o agrupar_por_regiao...")
        
        # Criar um DataFrame de teste com coluna Regiao j√° existente
        df_teste = pd.DataFrame({
            'Estado': ['AC', 'AM', 'PA'],
            'Regiao': ['Norte', 'Norte', 'Norte'],
            'M√©dia': [500, 520, 510]
        })
        
        resultado = agrupar_por_regiao(df_teste)
        
        if 'Regiao' in resultado.columns:
            print("‚úÖ Fun√ß√£o mant√©m coluna Regiao existente")
        else:
            print("‚ùå Fun√ß√£o n√£o mant√©m coluna Regiao")
            return False
            
        if len(resultado) == len(df_teste):
            print("‚úÖ DataFrame retornado sem modifica√ß√µes desnecess√°rias")
        else:
            print("‚ùå DataFrame foi modificado incorretamente")
            return False
        
        # 6. Listar regi√µes dispon√≠veis
        print(f"\n6Ô∏è‚É£ Regi√µes dispon√≠veis: {list(regioes_mapping.keys())}")
        print(f"   Total de estados: {len(estados_presentes)}")
        
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ Sudeste removido com sucesso")
        print("‚úÖ Fun√ß√£o agrupar_por_regiao otimizada")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    sucesso = test_regiao_changes()
    sys.exit(0 if sucesso else 1)
