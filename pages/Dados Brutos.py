import streamlit as st
import pandas as pd
import plotly.express as px
import numpy as np
import plotly.graph_objects as go
import geopandas as gpd

#---------------------------------- CARREGAMENTO DE DADOS ----------------------------------#
st.set_page_config(
    page_title="Dashboard ENEM",
    page_icon="üìö",
    layout="wide"
)
st.title('Dados Brutos')

colunas_notas = ['NU_NOTA_CN', 'NU_NOTA_CH', 'NU_NOTA_LC', 'NU_NOTA_MT', 'NU_NOTA_REDACAO']

@st.cache_data
def load_data():
    microdados = pd.DataFrame(pd.read_csv('sample.csv', sep=';', encoding='ISO-8859-1'))
    dtypes = pd.read_json("dtypes.json", typ='series')
    dados = microdados.astype(dtypes)
    # Converter todas as colunas de notas para float64
    for col in colunas_notas:
        dados[col] = dados[col].astype('float64')
    return dados

# Carregar dados uma √∫nica vez
microdados = load_data()


# Mapeamentos (usados em v√°rias partes do c√≥digo)
competencia_mapping = {
    'NU_NOTA_CN': 'Ci√™ncias da Natureza',
    'NU_NOTA_CH': 'Ci√™ncias Humanas',
    'NU_NOTA_LC': 'Linguagens e C√≥digos',
    'NU_NOTA_MT': 'Matem√°tica',
    'NU_NOTA_REDACAO': 'Reda√ß√£o'
}

dependencia_escola_mapping = {
    1: 'Federal',
    2: 'Estadual',
    3: 'Municipal',
    4: 'Privada'
}

sexo_mapping = {
    'M': 'Masculino',
    'F': 'Feminino'
}

race_mapping = {
    0: 'N√£o declarado',
    1: 'Branca',
    2: 'Preta',
    3: 'Parda',
    4: 'Amarela',
    5: 'Ind√≠gena',
    6: 'N√£o disp√µe da informa√ß√£o'
}

desempenho_mapping = {
    1: 'Desempenho Alto',
    2: 'Desempenho M√©dio',
    3: 'Desempenho Baixo',
}

infraestrutura_mapping = {
    1: 'Infraestrutura Alta',
    2: 'Infraestrutura M√©dia',
    3: 'Infraestrutura Baixa',
}

faixa_etaria_mapping = {
    1: '< 17',
    2: '17',
    3: '18',
    4: '19',
    5: '20',
    6: '21',
    7: '22',
    8: '23',
    9: '24',
    10: '25',
    11: '26 < 30',
    12: '31 < 35',
    13: '36 < 40',
    14: '41 < 45',
    15: '46 < 50',
    16: '51 < 55',
    17: '56 < 60',
    18: '61 < 65',
    19: '66 < 70',
    20: '> 70'
}

escolaridade_pai_mae_mapping = {
    'A': 'Nunca estudou',
    'B': 'Fundamental incompleto',
    'C': 'Fundamental completo',
    'D': 'M√©dio incompleto',
    'E': 'M√©dio Completo',
    'F': 'Superior Completo',    
    'G': 'P√≥s-gradua√ß√£o Completo',
    'H': 'N√£o sei'
}

variaveis_categoricas = {
    "TP_COR_RACA": {
        "nome": "Ra√ßa/Cor",
        "mapeamento": race_mapping,
        "ordem": list(race_mapping.values())
    },
    "TP_SEXO": {
        "nome": "Sexo", 
        "mapeamento": sexo_mapping,
        "ordem": list(sexo_mapping.values())
    },
    "TP_DEPENDENCIA_ADM_ESC": {
        "nome": "Depend√™ncia Administrativa", 
        "mapeamento": dependencia_escola_mapping,
        "ordem": list(dependencia_escola_mapping.values())
    },
    "Q001": {
        "nome": "Escolaridade do Pai", 
        "mapeamento": escolaridade_pai_mae_mapping,
        "ordem": list(escolaridade_pai_mae_mapping.values())
    },
    "Q002": {
        "nome": "Escolaridade da M√£e", 
        "mapeamento": escolaridade_pai_mae_mapping,
        "ordem": list(escolaridade_pai_mae_mapping.values())
    },
    "TP_FAIXA_ETARIA": {
        "nome": "Faixa Et√°ria", 
        "mapeamento": faixa_etaria_mapping,
        "ordem": list(faixa_etaria_mapping.values())
    }
}

nome_colunas = {
                "TP_FAIXA_ETARIA": "Faixa Et√°ria",
                "TP_SEXO": "Sexo",
                "TP_ESTADO_CIVIL": "Estado Civil",
                "TP_COR_RACA": "Ra√ßa/Cor",
                "TP_NACIONALIDADE": "Nacionalidade",
                "TP_ST_CONCLUSAO": "Situa√ß√£o Conclus√£o",
                "TP_ANO_CONCLUIU": "Ano Conclus√£o",
                "TP_ENSINO": "Tipo de Ensino",
                "NO_MUNICIPIO_ESC": "Munic√≠pio Escola",
                "SG_UF_ESC": "Estado Escola",
                "TP_DEPENDENCIA_ADM_ESC": "Depend√™ncia Administrativa",
                "TP_LOCALIZACAO_ESC": "Localiza√ß√£o Escola",
                "NO_MUNICIPIO_PROVA": "Munic√≠pio Prova",
                "SG_UF_PROVA": "Estado",
                "TP_PRESENCA_CN": "Presen√ßa Ci√™ncias da Natureza",
                "TP_PRESENCA_CH": "Presen√ßa Ci√™ncias Humanas",
                "TP_PRESENCA_LC": "Presen√ßa Linguagens e C√≥digos",
                "TP_PRESENCA_MT": "Presen√ßa Matem√°tica",
                "NU_NOTA_CN": "Ci√™ncias da Natureza",
                "NU_NOTA_CH": "Ci√™ncias Humanas",
                "NU_NOTA_LC": "Linguagens e C√≥digos",
                "NU_NOTA_MT": "Matem√°tica",
                "TX_RESPOSTAS_CN": "Respostas Ci√™ncias da Natureza",
                "TX_RESPOSTAS_CH": "Respostas Ci√™ncias Humanas",
                "TX_RESPOSTAS_LC": "Respostas Linguagens e C√≥digos",
                "TX_RESPOSTAS_MT": "Respostas Matem√°tica",
                "SG_UF_RESIDENCIA": "Estado Resid√™ncia",
                "TP_LINGUA": "L√≠ngua Estrangeira",
                "TX_GABARITO_CN": "Gabarito Ci√™ncias da Natureza",
                "TX_GABARITO_CH": "Gabarito Ci√™ncias Humanas",
                "TX_GABARITO_LC": "Gabarito Linguagens e C√≥digos",
                "TX_GABARITO_MT": "Gabarito Matem√°tica",
                "TP_STATUS_REDACAO": "Status Reda√ß√£o",
                "NU_NOTA_COMP1": "Nota Compet√™ncia 1",
                "NU_NOTA_COMP2": "Nota Compet√™ncia 2",
                "NU_NOTA_COMP3": "Nota Compet√™ncia 3",
                "NU_NOTA_COMP4": "Nota Compet√™ncia 4",
                "NU_NOTA_COMP5": "Nota Compet√™ncia 5",
                "NU_NOTA_REDACAO": "Reda√ß√£o",
                "NU_NOTA_REDACAO": "Reda√ß√£o",
                "Q001": "Escolaridade do Pai",
                "Q002": "Escolaridade da M√£e",
                "Q003": "Ocupa√ß√£o do Pai",
                "Q004": "Ocupa√ß√£o da M√£e",
                "Q005": "Pessoa na Resid√™ncia",
                "Q006": "Renda Familiar",
                "Q007": "Empregados na Resid√™ncia",
                "Q008": "Banheiro",
                "Q009": "Quartos",
                "Q010": "Carro",
                "Q011": "Moto",
                "Q012": "Geladeira",
                "Q013": "Freezer",
                "Q014": "M√°quina de Lavar",
                "Q015": "Secadora",
                "Q016": "Microondas",
                "Q017": "Lava Lou√ßa",
                "Q018": "Aspirador de P√≥",
                "Q019": "Televis√£o",
                "Q020": "DVD",
                "Q021": "TV Assinatura",
                "Q022": "Celular",
                "Q023": "Telefone Fixo",
                "Q024": "Computador",
                "Q025": "Internet",
                "TP_PRESENCA_GERAL": "Presen√ßa Geral",
                "NU_DESEMPENHO": "Desempenho",
                "NU_INFRAESTRUTURA": "Infraestrutura",
                "NU_MEDIA_GERAL": "M√©dia Geral",
            }

# Renomear as colunas do DataFrame usando o dicion√°rio nome_colunas
microdados = microdados.rename(columns=nome_colunas)
#---------------------------------- VISUALIZA√á√ÉO DE DADOS ----------------------------------#

# Dados detalhados
with st.expander("Colunas"):  
        colunas = st.multiselect('Selecione as colunas', list(microdados.columns), list(microdados.columns))

st.sidebar.title('Fitros')
with st.sidebar.expander('Estados'):
    estados = st.multiselect('Selecione os estados', list(microdados['Estado'].unique()), list(microdados['Estado'].unique()))

with st.sidebar.expander('M√©dia das Notas'):
    media = st.slider('Selecione a M√©dia das notas', 0, 1000, (0, 1000))
# with st.sidebar.expander('Nota de Ci√™ncias da Natureza'):
#     cn = st.slider('Selecione a Nota de Reda√ß√£o', 0, 1000, (0, 1000))
# with st.sidebar.expander('Nota de Ci√™ncias Humanas'):
#     ch = st.slider('Selecione a Nota de Ci√™ncias Humanas', 0, 1000, (0, 1000))
# with st.sidebar.expander('Nota de Linguagens e C√≥digos'):
#     lc = st.slider('Selecione a Nota de Linguagens e C√≥digos', 0, 1000, (0, 1000))
# with st.sidebar.expander('Nota de Matem√°tica'):
#     mt = st.slider('Selecione a Nota de Matem√°tica', 0, 1000, (0, 1000))
# with st.sidebar.expander('Nota de Reda√ß√£o'):
#     redacao = st.slider('Selecione a Nota de Reda√ß√£o', 0, 1000, (0, 1000))

with st.sidebar.expander('Faixa Et√°ria'):
    faixa_etaria = st.multiselect('Selecione a Faixa Et√°ria', list(faixa_etaria_mapping.values()), list(faixa_etaria_mapping.values()))
with st.sidebar.expander('Sexo'):
    sexo = st.multiselect('Selecione o Sexo', list(sexo_mapping.values()), list(sexo_mapping.values()))
with st.sidebar.expander('Ra√ßa/Cor'):
    raca = st.multiselect('Selecione a Ra√ßa/Cor', list(race_mapping.values())),
with st.sidebar.expander('Depend√™ncia Administrativa'):
    dependencia = st.multiselect('Selecione a Depend√™ncia Administrativa', list(dependencia_escola_mapping.values()), list(dependencia_escola_mapping.values()))

query = '`M√©dia Geral` >= @media[0] and `M√©dia Geral` <= @media[1]'

dados_filtrados = microdados.query(query)
dados_filtrados = dados_filtrados[colunas]

st.dataframe(dados_filtrados)

st.markdown(f'A tabela possui :blue[{dados_filtrados.shape[0]}] linhas e :blue[{dados_filtrados.shape[1]}] colunas.')
                          
